class Solution {
    public int minPathSum(int[][] grid) {
        // int n=arr.length;
        // int m=arr[0].length;
        
        // for(int i=1;i<n;i++){
        //     arr[i][0]+=arr[i-1][0];
        // }
        // for(int j=1;j<m;j++){
        //     arr[0][j]+=arr[0][j-1];
        // }
        // for(int i=1;i<n;i++){
        //     for(int j=1;j<m;j++){
        //         arr[i][j]+=Math.min(arr[i-1][j],arr[i][j-1]);
        //     }
        // }return arr[n-1][m-1];


        int[][] dp=new int[grid.length][grid[0].length];
        for(int[] a:dp){
            Arrays.fill(a,-1);
        }
        return Minimum_Path(grid,0,0,dp);

    }
    //second method
     public int Minimum_Path(int[][] grid,int cr,int cc,int[][] dp){
        if(cr==grid.length-1 && cc==grid[0].length-1){
            return grid[cr][cc];
        }
        if(cc==grid[0].length || cr== grid.length){
            return Integer.MAX_VALUE;
        }if(dp[cr][cc]!=-1){
            return dp[cr][cc];
        }

        int d=Minimum_Path(grid,cr+1,cc,dp);
        int r=Minimum_Path(grid,cr,cc+1,dp);

        return dp[cr][cc]=Math.min(d,r)+grid[cr][cc];
    }
}